
Buzzer_tiny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000082  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003ed  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036b  00000000  00000000  00000579  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000240  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000072  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 e8       	ldi	r30, 0x82	; 130
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	24 c0       	rjmp	.+72     	; 0x7e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
	}
}

int main(void)
{
	DDRB |= (1<<3);
  38:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1<<4);
  3a:	bc 9a       	sbi	0x17, 4	; 23
	
while(1)	
{
	PORTB = (1<<3);
  3c:	58 e0       	ldi	r21, 0x08	; 8
	for(int i = 0;i<long_delay;i++)
	{
		asm volatile("nop");
	}

	PORTB = (1<<4);
  3e:	40 e1       	ldi	r20, 0x10	; 16
	DDRB |= (1<<3);
	DDRB |= (1<<4);
	
while(1)	
{
	PORTB = (1<<3);
  40:	58 bb       	out	0x18, r21	; 24
	
	for(int i = 0;i<long_delay;i++)
  42:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
  46:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
  4a:	12 16       	cp	r1, r18
  4c:	13 06       	cpc	r1, r19
  4e:	3c f4       	brge	.+14     	; 0x5e <__SREG__+0x1f>
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
	{
		asm volatile("nop");
  54:	00 00       	nop
	
while(1)	
{
	PORTB = (1<<3);
	
	for(int i = 0;i<long_delay;i++)
  56:	01 96       	adiw	r24, 0x01	; 1
  58:	82 17       	cp	r24, r18
  5a:	93 07       	cpc	r25, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
	{
		asm volatile("nop");
	}

	PORTB = (1<<4);
  5e:	48 bb       	out	0x18, r20	; 24

	for(int i = 0;i<long_delay;i++)
  60:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
  64:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
  68:	12 16       	cp	r1, r18
  6a:	13 06       	cpc	r1, r19
  6c:	4c f7       	brge	.-46     	; 0x40 <__SREG__+0x1>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
	{
		asm volatile("nop");
  72:	00 00       	nop
		asm volatile("nop");
	}

	PORTB = (1<<4);

	for(int i = 0;i<long_delay;i++)
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	82 17       	cp	r24, r18
  78:	93 07       	cpc	r25, r19
  7a:	d9 f7       	brne	.-10     	; 0x72 <__SREG__+0x33>
  7c:	e1 cf       	rjmp	.-62     	; 0x40 <__SREG__+0x1>

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
